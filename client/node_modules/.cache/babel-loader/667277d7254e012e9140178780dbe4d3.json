{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyBHw5Z2OorXsDFz3m5OpTrzpd_OremVpY4\",\n  authDomain: \"crwn-db-8cfde.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-8cfde.firebaseio.com\",\n  projectId: \"crwn-db-8cfde\",\n  storageBucket: \"crwn-db-8cfde.appspot.com\",\n  messagingSenderId: \"358622153387\",\n  appId: \"1:358622153387:web:95d16ac2547b22708b45ee\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  console.log(userRef);\n  const snapShot = await userRef.get();\n  console.log(snapShot);\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createtedAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName: 'test user',\n        email: 'blabla@bla.com',\n        createtedAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  } //console.log(snapShot);\n\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  propt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/cc/Schreibtisch/tutorial/projekt/crw-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","console","log","snapShot","get","exists","displayName","email","createtedAt","Date","set","error","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","propt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,WAAW,EAAE,sCAHA;AAIbC,EAAAA,SAAS,EAAE,eAJE;AAKbC,EAAAA,aAAa,EAAE,2BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE;AAPM,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAE,OAAOC,QAAP,EAAgBC,cAAhB,KAAiC;AACxE,MAAI,CAACD,QAAL,EAAe;AACf,QAAME,OAAO,GAACC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,QAAMM,QAAQ,GAAC,MAAMN,OAAO,CAACO,GAAR,EAArB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;;AACA,MAAG,CAACA,QAAQ,CAACE,MAAb,EAAoB;AAClB,UAAM;AAACC,MAAAA,WAAD;AAAaC,MAAAA;AAAb,QAAoBZ,QAA1B;AACA,UAAMa,WAAW,GAAC,IAAIC,IAAJ,EAAlB;;AACA,QAAG;AACF,YAAMZ,OAAO,CAACa,GAAR,CAAY;AAChBJ,QAAAA,WAAW,EAAC,WADI;AAEhBC,QAAAA,KAAK,EAAC,gBAFU;AAGhBC,QAAAA,WAHgB;AAIhB,WAAGZ;AAJa,OAAZ,CAAN;AAMA,KAPD,CAOE,OAAMe,KAAN,EAAY;AACZV,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCS,KAAK,CAACC,OAAxC;AACD;AACF,GAnBuE,CAoBxE;;;AACA,SAAOf,OAAP;AAEA,CAvBM;AAyBPZ,QAAQ,CAAC4B,aAAT,CAAuB3B,MAAvB;AACA,OAAO,MAAM4B,IAAI,GAAG7B,QAAQ,CAAC6B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AACP,MAAMiB,QAAQ,GAAG,IAAI9B,QAAQ,CAAC6B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AACP,eAAe9B,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyBHw5Z2OorXsDFz3m5OpTrzpd_OremVpY4\",\n  authDomain: \"crwn-db-8cfde.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-8cfde.firebaseio.com\",\n  projectId: \"crwn-db-8cfde\",\n  storageBucket: \"crwn-db-8cfde.appspot.com\",\n  messagingSenderId: \"358622153387\",\n  appId: \"1:358622153387:web:95d16ac2547b22708b45ee\"\n};\n\n\nexport const createUserProfileDocument= async (userAuth,additionalData)=>{\n if (!userAuth) return;\n const userRef=firestore.doc(`users/${userAuth.uid}`);\n console.log(userRef);\n const snapShot=await userRef.get();\n console.log(snapShot);\n if(!snapShot.exists){\n   const {displayName,email}=userAuth;\n   const createtedAt=new Date();\n   try{\n    await userRef.set({\n      displayName:'test user',\n      email:'blabla@bla.com',\n      createtedAt,\n      ...additionalData\n    })\n   } catch(error){\n     console.log('error creating user',error.message);\n   }\n }\n //console.log(snapShot);\n return userRef;\n\n}; \n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ propt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}