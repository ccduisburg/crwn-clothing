{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSucces, signInFailure } from './user.actions';\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSucces({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START);\n}\nexport function* userSagas() {\n  yield;\n  all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated)]);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated());\n}","map":{"version":3,"sources":["/home/cc/Schreibtisch/tutorial/projekt/crw-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSucces","signInFailure","isUserAuthenticated","userAuth","getSnapshotFromUserAuth","error","userRef","userSnapshot","get","id","data","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas","onCheckUserSession","CHECK_USER_SESSION"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAAyDC,cAAzD,QAA+E,+BAA/E;AAEA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AAEA,OAAO,UAAUC,mBAAV,GAAgC;AACvC,MAAI;AACA,UAAMC,QAAQ,GAAC,MAAMJ,cAAc,EAAnC;AACA,QAAG,CAACI,QAAJ,EAAc;AACd,UAAMC,uBAAuB,CAACD,QAAD,CAA7B;AACH,GAJD,CAIE,OAAOE,KAAP,EAAc;AACZ,UAAMb,GAAG,CAACS,aAAa,CAACI,KAAD,CAAd,CAAT;AACH;AACA;AAED,OAAO,UAAUD,uBAAV,CAAkCD,QAAlC,EAA4C;AAC/C,MAAI;AACA,UAAMG,OAAO,GAAG,MAAMZ,IAAI,CAACI,yBAAD,EAA4BK,QAA5B,CAA1B;AACA,UAAMI,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMhB,GAAG,CAACQ,YAAY,CAAC;AAAES,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAb,CAAT;AACH,GAJD,CAIE,OAAOL,KAAP,EAAc;AACZ,UAAMb,GAAG,CAACS,aAAa,CAACI,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUM,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMhB,IAAI,CAACiB,eAAL,CAAqBhB,cAArB,CAAvB;AACA,UAAMO,uBAAuB,CAACQ,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOP,KAAP,EAAc;AACZ,UAAMb,GAAG,CAACS,aAAa,CAACI,KAAD,CAAd,CAAT;AACH;AACJ;AAGD,OAAO,UAAUS,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAC/D,MAAI;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMhB,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMb,uBAAuB,CAACQ,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOP,KAAP,EAAc;AACZ,UAAMb,GAAG,CAACS,aAAa,CAACI,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUc,mBAAV,GAAgC;AACnC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,oBAAjB,CAAhB;AACH;AACD,OAAO,UAAUC,kBAAV,GAA+B;AAClC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,CAAhB;AACH;AAED,OAAO,UAAUC,SAAV,GAAsB;AACzB;AACA9B,EAAAA,GAAG,CAAC,CAACC,IAAI,CAACyB,mBAAD,CAAL,EAA4BzB,IAAI,CAAC2B,kBAAD,CAAhC,EAAqD3B,IAAI,CAACQ,mBAAD,CAAzD,CAAD,CAAH;AACH;AACD,OAAO,UAAUsB,kBAAV,GAA+B;AAClC,QAAMjC,UAAU,CAACI,eAAe,CAAC8B,kBAAjB,EAAqCvB,mBAAmB,EAAxD,CAAhB;AACH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument,getCurrentUser } from '../../firebase/firebase.utils';\n\nimport { signInSucces, signInFailure } from './user.actions';\n\nexport function* isUserAuthenticated() {\ntry {\n    const userAuth=yield getCurrentUser();\n    if(!userAuth) return ;\n    yield getSnapshotFromUserAuth(userAuth)\n} catch (error) {\n    yield put(signInFailure(error));\n}\n}\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n    try {\n        const userRef = yield call(createUserProfileDocument, userAuth);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSucces({ id: userSnapshot.id, ...userSnapshot.data() }));\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* signInWithGoogle() {\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START)\n}\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START)\n}\n\nexport function* userSagas() {\n    yield\n    all([call(onGoogleSignInStart), call(onEmailSignInStart),call(isUserAuthenticated)])\n}\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated())\n}"]},"metadata":{},"sourceType":"module"}